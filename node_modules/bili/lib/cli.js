#!/usr/bin/env node
'use strict';

var _cac = require('cac');

var _cac2 = _interopRequireDefault(_cac);

var _ = require('.');

var _2 = _interopRequireDefault(_);

var _getConfig = require('./get-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const cli = (0, _cac2.default)();

cli.command('*', 'Bundle library', (() => {
  var _ref = _asyncToGenerator(function* (input, flags) {
    const config = yield (0, _getConfig.getBiliConfig)();
    return _2.default.write(Object.assign({
      input
    }, config, flags));
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})()).option('watch', {
  desc: 'Run in watch mode',
  alias: 'w'
}).option('outDir', {
  desc: 'Output directory',
  alias: ['o', 'd']
}).option('filename', {
  desc: 'Output filename, default: "[name][suffix].js"'
}).option('name', {
  desc: 'Set the [name] part of "filename"'
}).option('format', {
  desc: 'Output format'
}).option('plugin', {
  desc: 'Add custom Rollup plugins'
}).option('moduleName', {
  desc: 'Module name for UMD bundle'
}).option('jsx', {
  desc: 'Switch JSX syntax, eg: "vue" "h"'
}).option('global', {
  desc: 'Mark module as global variable. Any module IDs defined here are added to external',
  alias: 'g'
}).option('alias', {
  desc: 'Set option for rollup-plugin-alias'
}).option('replace', {
  desc: 'Set option for rollup-plugin-replace'
}).option('env', {
  desc: 'Replace env variables in your bundle',
  alias: 'e'
}).option('inline', {
  desc: 'Inline external node modules'
}).option('banner', {
  desc: 'Content to insert to the top of bundle file, boolean or string or object'
}).option('inspectRollup', {
  desc: 'Inspect Rollup options'
});

cli.on('error', err => _2.default.handleError(err));

cli.parse();